--/adding 'status' column which will define whether a student is currently active or not
alter table students
add status number;

update students
set status=1;

--in students table, 'adviser' data type is set to number, but, the adviser will be the employee, so as employee_id is varchar2(15), so adviser data type is changed to varchar2(15)


alter table students
modify(
  adviser varchar2(15)
);

DROP TABLE DB_IUMS.EQUIVALENT_COURSE CASCADE CONSTRAINTS;

CREATE TABLE DB_IUMS.EQUIVALENT_COURSE
(
  ID             NUMBER,
  OLD_COURSE_ID  VARCHAR2(25 BYTE),
  NEW_COURSE_ID  VARCHAR2(25 BYTE),
  LAST_MODIFIED  VARCHAR2(18 BYTE)
)

DROP SEQUENCE DB_IUMS.SQN_EQUIVALENT_COURSE_ID;

CREATE SEQUENCE DB_IUMS.SQN_EQUIVALENT_COURSE_ID
  START WITH 11111
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

DROP TRIGGER DB_IUMS.EQUIVALENT_COURSE_TRIGGER;

CREATE OR REPLACE TRIGGER DB_IUMS.EQUIVALENT_COURSE_TRIGGER
BEFORE INSERT ON DB_IUMS.EQUIVALENT_COURSE
FOR EACH ROW
BEGIN
  SELECT DB_IUMS.SQN_EQUIVALENT_COURSE_ID.NEXTVAL
  INTO   :new.ID
  FROM   dual;
END;
/

CREATE TABLE DB_IUMS.TASK_STATUS
(
  TASK_ID               VARCHAR2(50),
  STATUS                NUMBER,
  PROGRESS_DESC         VARCHAR2(250),
  TASK_COMPLETION_DATE  DATE,
  LAST_MODIFIED         VARCHAR2(18),
  SERIAL                NUMBER
)


DROP SEQUENCE DB_IUMS.SQN_TASK_STATUS_SERIAL;

CREATE SEQUENCE DB_IUMS.SQN_TASK_STATUS_SERIAL
  START WITH 11
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

DROP TRIGGER DB_IUMS.TASK_STATUS_TRIGGER;

CREATE OR REPLACE TRIGGER DB_IUMS.TASK_STATUS_TRIGGER
BEFORE INSERT ON DB_IUMS.TASK_STATUS
FOR EACH ROW
BEGIN
  SELECT DB_IUMS.SQN_TASK_STATUS_SERIAL.NEXTVAL
  INTO   :new.SERIAL
  FROM   dual;
END;
/

CREATE TABLE DB_IUMS.RESULT_PUBLISH
(
  ID             NUMBER,
  PROGRAM_ID     NUMBER,
  SEMESTER_ID    NUMBER,
  PUBLISH_DATE   DATE,
  LAST_MODIFIED  VARCHAR2(1)
)

CREATE SEQUENCE DB_IUMS.SQN_RESULT_PUBLISH_ID
  START WITH 20000
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE OR REPLACE TRIGGER DB_IUMS.RESULT_PUBLISH_TRIGGER
BEFORE INSERT ON DB_IUMS.RESULT_PUBLISH
FOR EACH ROW
BEGIN
  SELECT DB_IUMS.SQN_RESULT_PUBLISH_ID.NEXTVAL
  INTO   :new.ID
  FROM   dual;
END;
/

//****************************************************************
table: mst_faculty
//***************************************************************
ALTER TABLE DB_IUMS.MST_FACULTY
 DROP PRIMARY KEY CASCADE;

DROP TABLE DB_IUMS.MST_FACULTY CASCADE CONSTRAINTS;

CREATE TABLE DB_IUMS.MST_FACULTY
(
  ID             NUMBER,
  LONG_NAME      VARCHAR2(100 BYTE),
  SHORT_NAME     VARCHAR2(20 BYTE),
  LAST_MODIFIED  VARCHAR2(18 BYTE)
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;


--  There is no statement for index DB_IUMS.SYS_C0011826.
--  The object is created when the parent object is created.

CREATE OR REPLACE TRIGGER DB_IUMS.trg_faculty_id
  before insert ON DB_IUMS.MST_FACULTY
  for EACH ROW
BEGIN
    select faculty_id_seq.nextval
      INTO :new.id
      from dual;
  END;
/


ALTER TABLE DB_IUMS.MST_FACULTY ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE SYSTEM
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
                BUFFER_POOL      DEFAULT
                FLASH_CACHE      DEFAULT
                CELL_FLASH_CACHE DEFAULT
               )
  ENABLE VALIDATE);

Insert into DB_IUMS.MST_FACULTY
   (ID, LONG_NAME, SHORT_NAME, LAST_MODIFIED)
 Values
   (1, 'Engineering/Architecture Faculty', 'Engg. Faculty', '12345');
Insert into DB_IUMS.MST_FACULTY
   (ID, LONG_NAME, SHORT_NAME, LAST_MODIFIED)
 Values
   (2, 'Business Faculty', 'Business Faculty', '12345');
COMMIT;




//************************************************************
sequence form parameter_setting
//************************************************************
create SEQUENCE  param_setting_id_seq;

create trigger trg_param_setting_id
  before insert on MST_PARAMETER_SETTING
  for EACH ROW
  BEGIN
    SELECT  param_setting_id_seq.nextval
      into :new.PS_ID
      from dual;
  END;
  /



  //**************************************************************
  adding faculty column in mst_program
  //**************************************************************

  alter table MST_PROGRAM
  add  faculty_id NUMBER;


  update mst_program set FACULTY_ID=1 where PROGRAM_SHORT_NAME!='BBA';

  update mst_program set FACULTY_ID=2 where PROGRAM_SHORT_NAME='BBA';



  //***************************** admision_merit_list ***************************************
  create table admission_merit_list(
    id NUMBER,
    semester_id number,
    merit_sl_no number not null,
    receipt_id number not null,
    admission_roll number not null,
    candidate_name varchar2(100) not null,
    admission_group number not null,
    faculty_id number not null,
    last_modified varchar2(18),
    CONSTRAINT admission_merit_list_uniq UNIQUE (merit_sl_no,receipt_id,admission_roll,admission_group),
    PRIMARY KEY (id)
  );


  create sequence admission_merit_seq START WITH 1;

  create or REPLACE TRIGGER admission_merit_trig
    BEFORE INSERT on admission_merit_list
    for EACH ROW
    BEGIN
      select admission_merit_seq.nextval
        into :new.id
        from dual;
    END;
  /


  comment on COLUMN admission_merit_list.admission_group is '1=GENERAL, 2= Freedom Fighter, 3= Remote Area, 4= English Medium';

  //*************************************** end admission merit list *******************************************************



  //************************************** admissionStudents **************************************************************
create table admission_students
(
  semester_id number,
  receipt_id varchar2(25),
  pin varchar2(25),
  hsc_board VARCHAR2(25),
  hsc_roll VARCHAR2(25),
  hsc_regno VARCHAR2(25),
  hsc_year number,
  hsc_group varchar(18),
  ssc_board varchar2(25),
  ssc_roll VARCHAR2(25),
  ssc_regno VARCHAR2(25),
  ssc_year number,
  ssc_group varchar2(25),
  gender varchar2(1),
  date_of_birth DATE,
  student_name varchar2(50),
  father_name varchar2(50),
  mother_name varchar2(50),
  ssc_gpa number(1,2),
  hsc_gpa number(1,2),
  quota varchar2(2),
  admission_roll varchar2(25),
  merit_sl_no number,
  student_id varchar2(9),
  allocated_program_id number,
  migration_status number,
  CONSTRAINT admission_students_uniq UNIQUE (semester_id,receipt_id,pin,ssc_roll,hsc_roll,quota,student_id, allocated_program_id)
);