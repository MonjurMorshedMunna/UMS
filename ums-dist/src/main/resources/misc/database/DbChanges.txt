--/adding 'status' column which will define whether a student is currently active or not
alter table students
add status number;

update students
set status=1;

--in students table, 'adviser' data type is set to number, but, the adviser will be the employee, so as employee_id is varchar2(15), so adviser data type is changed to varchar2(15)


alter table students
modify(
  adviser varchar2(15)
);

DROP TABLE DB_IUMS.EQUIVALENT_COURSE CASCADE CONSTRAINTS;

CREATE TABLE DB_IUMS.EQUIVALENT_COURSE
(
  ID             NUMBER,
  OLD_COURSE_ID  VARCHAR2(25 BYTE),
  NEW_COURSE_ID  VARCHAR2(25 BYTE),
  LAST_MODIFIED  VARCHAR2(18 BYTE)
)

DROP SEQUENCE DB_IUMS.SQN_EQUIVALENT_COURSE_ID;

CREATE SEQUENCE DB_IUMS.SQN_EQUIVALENT_COURSE_ID
  START WITH 11111
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

DROP TRIGGER DB_IUMS.EQUIVALENT_COURSE_TRIGGER;

CREATE OR REPLACE TRIGGER DB_IUMS.EQUIVALENT_COURSE_TRIGGER
BEFORE INSERT ON DB_IUMS.EQUIVALENT_COURSE
FOR EACH ROW
BEGIN
  SELECT DB_IUMS.SQN_EQUIVALENT_COURSE_ID.NEXTVAL
  INTO   :new.ID
  FROM   dual;
END;
/

CREATE TABLE DB_IUMS.TASK_STATUS
(
  TASK_ID               VARCHAR2(50),
  TASK_NAME             VARCHAR2(100),
  STATUS                NUMBER,
  PROGRESS_DESC         VARCHAR2(250),
  TASK_COMPLETION_DATE  DATE,
  LAST_MODIFIED         VARCHAR2(18),
  SERIAL                NUMBER
)


DROP SEQUENCE DB_IUMS.SQN_TASK_STATUS_SERIAL;

CREATE SEQUENCE DB_IUMS.SQN_TASK_STATUS_SERIAL
  START WITH 11
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

DROP TRIGGER DB_IUMS.TASK_STATUS_TRIGGER;

CREATE OR REPLACE TRIGGER DB_IUMS.TASK_STATUS_TRIGGER
BEFORE INSERT ON DB_IUMS.TASK_STATUS
FOR EACH ROW
BEGIN
  SELECT DB_IUMS.SQN_TASK_STATUS_SERIAL.NEXTVAL
  INTO   :new.SERIAL
  FROM   dual;
END;
/
