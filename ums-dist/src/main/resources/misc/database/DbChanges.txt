ALTER TABLE DB_IUMS.SEMESTER_WITHDRAW
 DROP PRIMARY KEY CASCADE;

DROP TABLE DB_IUMS.SEMESTER_WITHDRAW CASCADE CONSTRAINTS;

CREATE TABLE DB_IUMS.SEMESTER_WITHDRAW
(
  SW_ID          NUMBER,
  SEMESTER_ID    NUMBER,
  LAST_MODIFIED  VARCHAR2(18 BYTE),
  CAUSE          VARCHAR2(2000 CHAR),
  PROGRAM_ID     NUMBER,
  STUDENT_ID     VARCHAR2(9 BYTE)
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON COLUMN DB_IUMS.SEMESTER_WITHDRAW.CAUSE IS 'Student will describe the cause of his/her semester withdrawal';



CREATE UNIQUE INDEX DB_IUMS.SEMESTER_WITHDRAW_PK ON DB_IUMS.SEMESTER_WITHDRAW
(SW_ID)
LOGGING
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOPARALLEL;


CREATE OR REPLACE TRIGGER DB_IUMS.SEMESTER_WITHDRAW_TRG
BEFORE INSERT ON DB_IUMS.SEMESTER_WITHDRAW
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SW_ID IS NULL THEN
      SELECT SEMESTER_WITHDRAW_SEQ4.NEXTVAL INTO :NEW.SW_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


ALTER TABLE DB_IUMS.SEMESTER_WITHDRAW ADD (
  CONSTRAINT SEMESTER_WITHDRAW_PK
  PRIMARY KEY
  (SW_ID)
  USING INDEX DB_IUMS.SEMESTER_WITHDRAW_PK
  ENABLE VALIDATE);







ALTER TABLE DB_IUMS.SEMESTER_WITHDRAW_LOG
 DROP PRIMARY KEY CASCADE;

DROP TABLE DB_IUMS.SEMESTER_WITHDRAW_LOG CASCADE CONSTRAINTS;

CREATE TABLE DB_IUMS.SEMESTER_WITHDRAW_LOG
(
  SWL_ID           NUMBER                       NOT NULL,
  ACTOR            NUMBER,
  EVENT_DATE_TIME  DATE,
  ACTION           NUMBER,
  LAST_MODIFIED    VARCHAR2(20 BYTE),
  SW_ID            NUMBER,
  COMMENTS         VARCHAR2(500 BYTE),
  ACTOR_ID         VARCHAR2(15 BYTE)
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON COLUMN DB_IUMS.SEMESTER_WITHDRAW_LOG.SW_ID IS 'semester withdrawal id';



CREATE UNIQUE INDEX DB_IUMS.SEMESTER_WITHDRAW_LOG_PK ON DB_IUMS.SEMESTER_WITHDRAW_LOG
(SWL_ID)
LOGGING
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOPARALLEL;


CREATE OR REPLACE TRIGGER DB_IUMS.SEMESTER_WITHDRAW_LOG_TRG
BEFORE INSERT ON DB_IUMS.SEMESTER_WITHDRAW_LOG
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SWL_ID IS NULL THEN
      SELECT SEMESTER_WITHDRAW_LOG_SEQ3.NEXTVAL INTO :NEW.SWL_ID FROM SYS.DUAL;
    END IF;
    IF INSERTING AND :NEW.LAST_MODIFIED IS NULL THEN
      SELECT SEMESTER_WITHDRAW_LOG_SEQ4.NEXTVAL INTO :NEW.LAST_MODIFIED FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


CREATE OR REPLACE TRIGGER DB_IUMS.SEMESTER_WITHDRAW_LOG_TRG2
BEFORE INSERT ON DB_IUMS.SEMESTER_WITHDRAW_LOG
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/


CREATE OR REPLACE TRIGGER DB_IUMS.SEMESTER_WITHDRAW_LOG_TRG1
BEFORE INSERT ON DB_IUMS.SEMESTER_WITHDRAW_LOG
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/


ALTER TABLE DB_IUMS.SEMESTER_WITHDRAW_LOG ADD (
  CONSTRAINT SEMESTER_WITHDRAW_LOG_PK
  PRIMARY KEY
  (SWL_ID)
  USING INDEX DB_IUMS.SEMESTER_WITHDRAW_LOG_PK
  ENABLE VALIDATE);

Insert into DB_IUMS.SEMESTER_WITHDRAW_LOG
   (SWL_ID, ACTOR, EVENT_DATE_TIME, ACTION, LAST_MODIFIED,
    SW_ID, COMMENTS, ACTOR_ID)
 Values
   (1, 0, TO_DATE('01/01/2016 00:00:00', 'MM/DD/YYYY HH24:MI:SS'), 0, '1',
    1, 'NO COMMENTS', '0');
COMMIT;
